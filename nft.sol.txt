// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyNFTContract is ERC1155, Ownable {
    struct NFT {
        string name;
        string uri;
        string description;
        uint256 price;
        address owner;
        bool forSale;
    }

    struct Collection {
        string name;
        string description;
        address owner;
        uint256[] nftIds;
    }

    mapping(uint256 => NFT) public nfts;
    mapping(uint256 => Collection) public collections;
    mapping(address => uint256[]) public userCollections;
    mapping(string => uint256) public collectionNameToId;
    uint256 private nextNftId;
    uint256 private nextCollectionId;

    event NFTMinted(uint256 indexed nftId, string name, string uri, string description, uint256 collectionId);
    event NFTForSale(uint256 indexed nftId, uint256 price);
    event NFTSold(uint256 indexed nftId, address buyer, uint256 price);
    event CollectionCreated(address indexed owner, uint256 collectionId, string name);

    constructor() ERC1155("https://myapi.com/tokens/{id}.json") Ownable(msg.sender) {}

    function createCollection(string memory _name, string memory _description) external {
        require(collectionNameToId[_name] == 0, "Collection name already exists");

        uint256 collectionId = nextCollectionId++;
        uint256[] memory emptyArray;
        collections[collectionId] = Collection({
            name: _name,
            description: _description,
            owner: msg.sender,
            nftIds: emptyArray
        });
        userCollections[msg.sender].push(collectionId);
        collectionNameToId[_name] = collectionId;
        emit CollectionCreated(msg.sender, collectionId, _name);
    }

    function mintNFT(
        string memory _name,
        string memory _uri,
        string memory _description,
        string memory _collectionName
    ) external {
        uint256 _collectionId = collectionNameToId[_collectionName];
        require(_collectionId != 0, "Invalid collection name");
        require(collections[_collectionId].owner == msg.sender, "You are not the owner of this collection");

        uint256 nftId = nextNftId++;
        nfts[nftId] = NFT({
            name: _name,
            uri: _uri,
            description: _description,
            price: 0,
            owner: msg.sender,
            forSale: false
        });
        collections[_collectionId].nftIds.push(nftId);
        _mint(msg.sender, nftId, 1, "");

        emit NFTMinted(nftId, _name, _uri, _description, _collectionId);
    }

    function approveAndSetForSale(uint256 _nftId, uint256 _priceInEth) external {
        require(balanceOf(msg.sender, _nftId) > 0, "You do not own this NFT");
        require(nfts[_nftId].owner == msg.sender, "You are not the owner of this NFT");
        nfts[_nftId].forSale = true;
        nfts[_nftId].price = _priceInEth;
        setApprovalForAll(address(this), true);
        emit NFTForSale(_nftId, nfts[_nftId].price);
    }

    function approveContractToManageTokens() public {
        setApprovalForAll(address(this), true);
    }

    function buyNFT(uint256 _nftId) external payable {
        NFT storage nft = nfts[_nftId];
        require(nft.forSale, "NFT is not for sale");
        require(msg.value >= nft.price, "Insufficient funds");
        require(nft.owner != msg.sender, "Owner cannot buy their own NFT");
        address payable seller = payable(nft.owner);
        require(isApprovedForAll(seller, address(this)), "Seller has not approved the contract to manage their tokens");
        require(isApprovedForAll(msg.sender, address(this)), "Buyer has not approved the contract to manage their tokens");
        seller.transfer(msg.value);
        _safeTransferFrom(seller, msg.sender, _nftId, 1, "");
        nft.forSale = false;
        nft.price = 0;
        nft.owner = msg.sender;
        emit NFTSold(_nftId, msg.sender, msg.value);
    }

    function uri(uint256 tokenId) public view override returns (string memory) {
        return string(abi.encodePacked(super.uri(tokenId), nfts[tokenId].uri));
    }

    function getNFTDetailsById(uint256 _nftId) external view returns (string memory, string memory, string memory, uint256, address, bool) {
        NFT storage nft = nfts[_nftId];
        return (nft.name, nft.uri, nft.description, nft.price, nft.owner, nft.forSale);
    }

    function getNFTsForSale() external view returns (uint256[] memory, string[] memory, string[] memory, string[] memory, uint256[] memory, address[] memory) {
        uint256 count = 0;
        for (uint256 i = 0; i < nextNftId; i++) {
            if (nfts[i].forSale) {
                count++;
            }
        }
        uint256[] memory ids = new uint256[](count);
        string[] memory names = new string[](count);
        string[] memory uris = new string[](count);
        string[] memory descriptions = new string[](count);
        uint256[] memory prices = new uint256[](count);
        address[] memory owners = new address[](count);
        uint256 index = 0;
        for (uint256 i = 0; i < nextNftId; i++) {
            if (nfts[i].forSale) {
                ids[index] = i;
                names[index] = nfts[i].name;
                uris[index] = nfts[i].uri;
                descriptions[index] = nfts[i].description;
                prices[index] = nfts[i].price;
                owners[index] = nfts[i].owner;
                index++;
            }
        }
        return (ids, names, uris, descriptions, prices, owners);
    }

    function getNFTsOwnedByUser(address _owner) external view returns (uint256[] memory, string[] memory, string[] memory, uint256[] memory, bool[] memory) {
        uint256 count = 0;
        for (uint256 i = 0; i < nextNftId; i++) {
            if (nfts[i].owner == _owner) {
                count++;
            }
        }
        uint256[] memory ids = new uint256[](count);
        string[] memory names = new string[](count);
        string[] memory uris = new string[](count);
        uint256[] memory prices = new uint256[](count);
        bool[] memory forSale = new bool[](count);
        uint256 index = 0;
        for (uint256 i = 0; i < nextNftId; i++) {
            if (nfts[i].owner == _owner) {
                ids[index] = i;
                names[index] = nfts[i].name;
                uris[index] = nfts[i].uri;
                prices[index] = nfts[i].price;
                forSale[index] = nfts[i].forSale;
                index++;
            }
        }
        return (ids, names, uris, prices, forSale);
    }

    function isApproved(address owner) external view returns (bool) {
        return isApprovedForAll(owner, address(this));
    }

    // Fetch all collections
    function getAllCollections() external view returns (uint256[] memory, string[] memory, string[] memory, address[] memory) {
        uint256[] memory ids = new uint256[](nextCollectionId);
        string[] memory names = new string[](nextCollectionId);
        string[] memory descriptions = new string[](nextCollectionId);
        address[] memory owners = new address[](nextCollectionId);

        for (uint256 i = 0; i < nextCollectionId; i++) {
            Collection storage collection = collections[i];
            ids[i] = i;
            names[i] = collection.name;
            descriptions[i] = collection.description;
            owners[i] = collection.owner;
        }

        return (ids, names, descriptions, owners);
    }

    // Fetch all NFTs
    function getAllNFTs() external view returns (uint256[] memory, string[] memory, string[] memory, string[] memory, uint256[] memory, address[] memory, bool[] memory) {
        uint256[] memory ids = new uint256[](nextNftId);
        string[] memory names = new string[](nextNftId);
        string[] memory uris = new string[](nextNftId);
        string[] memory descriptions = new string[](nextNftId);
        uint256[] memory prices = new uint256[](nextNftId);
        address[] memory owners = new address[](nextNftId);
        bool[] memory forSale = new bool[](nextNftId);

        for (uint256 i = 0; i < nextNftId; i++) {
            NFT storage nft = nfts[i];
            ids[i] = i;
            names[i] = nft.name;
            uris[i] = nft.uri;
            descriptions[i] = nft.description;
            prices[i] = nft.price;
            owners[i] = nft.owner;
            forSale[i] = nft.forSale;
        }

        return (ids, names, uris, descriptions, prices, owners, forSale);
    }
}